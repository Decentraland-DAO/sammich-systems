import { checkBoxesContact, getAbsoluteCollisionBoxFromSprite } from "./math-util";
export const createSpriteEntityFactory = ({ screen, serverRoom, clientRoom, isClientPlayer, playerIndex }) => {
    let IDCount = 1;
    const spriteEntityKlasses = new Map();
    const spriteEntities = [];
    const collisionListeners = new Map();
    let spritesStateInitialized = false;
    if (clientRoom && !isClientPlayer) {
        clientRoom.onStateChange((...args) => {
            if (!spritesStateInitialized && clientRoom.state.players[playerIndex].spriteEntities) {
                clientRoom.state.players[playerIndex].spriteEntities.onAdd((spriteState, index) => {
                    const klass = spriteState.klass;
                    const SpriteKlass = spriteEntityKlasses.get(klass);
                    const localSprite = spriteEntities.find(i => i.ID === spriteState.ID);
                    if (!localSprite) {
                        const { ID, layer, frame } = spriteState;
                        SpriteKlass?.create({
                            ID,
                            pixelPosition: [spriteState.x, spriteState.y],
                            layer,
                            network: true,
                            frame
                        });
                    }
                    spriteState.onChange((changes) => {
                        const spriteStateJSON = spriteState.toJSON();
                        const localSprite = spriteEntities.find(i => i.ID === spriteStateJSON.ID);
                        if (localSprite?.sprite && localSprite.sprite.getPixelPosition()[0] !== spriteStateJSON.x || localSprite.sprite.getPixelPosition()[1] !== spriteStateJSON.y) {
                            localSprite.setPixelPosition(spriteStateJSON.x, spriteStateJSON.y);
                        }
                        if (localSprite?.sprite && localSprite.sprite.getFrame() !== spriteStateJSON.frame) {
                            localSprite.applyFrame(spriteStateJSON.frame);
                        }
                    });
                });
                clientRoom.state.players[playerIndex].spriteEntities.onRemove((spriteState) => {
                    const localSprite = spriteEntities.find(i => i.ID === spriteState.ID);
                    localSprite?.destroy();
                });
                spritesStateInitialized = true;
            }
        });
    }
    return {
        registerSpriteEntity,
        checkColliders,
        getSpriteEntities: () => spriteEntities,
        cleanSpriteEntities: () => {
            while (spriteEntities.length)
                spriteEntities[0].destroy();
        },
        getCollisionListeners: () => collisionListeners,
        getSpriteEntityKlasses: () => spriteEntityKlasses,
        destroy: () => {
            while (spriteEntities?.length)
                spriteEntities[0].destroy();
        }
    };
    function checkColliders() {
        const colliders = spriteEntities.filter((i) => i.detectCollisions);
        colliders.forEach((colliderSpriteEntity, index) => {
            const otherColliders = colliders.filter((c) => c !== colliderSpriteEntity);
            let foundColliders = 0;
            otherColliders.forEach((otherSprite) => {
                const collisionListener = collisionListeners.get(colliderSpriteEntity);
                if (collisionListener && checkBoxesContact(getAbsoluteCollisionBoxFromSprite(colliderSpriteEntity), getAbsoluteCollisionBoxFromSprite(otherSprite))) {
                    foundColliders++;
                    if (!colliderSpriteEntity.colliding)
                        collisionListener({ otherSprite });
                    colliderSpriteEntity.colliding = true;
                }
            });
            colliderSpriteEntity.colliding = !!foundColliders;
            return foundColliders;
        });
    }
    function registerSpriteEntity({ klass, spriteDefinition, collisionBox }) {
        const spriteEntityKlass = {
            create: ({ pixelPosition, layer, network, ID, frame, zoom }) => {
                const _ID = ID || IDCount++;
                const sprite = screen.addSprite({
                    ID: _ID,
                    spriteDefinition,
                    pixelPosition,
                    layer,
                    network,
                    klass,
                    zoom
                });
                if (frame !== undefined) {
                    sprite.applyFrame(frame);
                }
                const _createParams = {
                    pixelPosition,
                    layer,
                    network
                };
                const spriteEntity = {
                    ID: _ID,
                    setNetwork: (value) => sprite.setNetwork(value),
                    getNetwork: () => sprite.getNetwork(),
                    network,
                    sprite,
                    getPixelPosition: () => sprite.getPixelPosition(),
                    setPixelPosition: (px, py) => sprite.setPixelPosition(px, py),
                    applyFrame: (n) => sprite.applyFrame(n),
                    hide: (n) => sprite.hide(n),
                    show: (n) => sprite.show(n),
                    setZoom: (zoom) => sprite.setZoom(zoom),
                    klassParams: {
                        klass,
                        spriteDefinition,
                        collisionBox
                    },
                    spriteEntityKlass,
                    createParams: _createParams,
                    onCollide: (fn) => collisionListeners.set(spriteEntity, fn),
                    detectCollisions: !!collisionBox,
                    colliding: false,
                    isKlass: (klass) => spriteEntityKlass === klass,
                    destroy: () => {
                        sprite.destroy();
                        delete spriteEntity.spriteEntityKlass;
                        delete spriteEntity.onCollide;
                        collisionListeners.delete(spriteEntity);
                        const spriteIndex = spriteEntities.indexOf(spriteEntity);
                        spriteEntities.splice(spriteIndex, 1);
                    },
                    toJSON: () => {
                        return {
                            position: sprite.getPixelPosition(),
                            layer: sprite.getLayer(),
                            ID: sprite.ID,
                            network,
                            frame: sprite.getFrame(),
                            klass,
                            createParams: _createParams
                        };
                    }
                };
                spriteEntities.push(spriteEntity);
                return spriteEntity;
            },
            klass,
            spriteDefinition,
            collisionBox
        };
        spriteEntityKlasses.set(klass, spriteEntityKlass);
        return spriteEntityKlass;
    }
};
//# sourceMappingURL=data:application/json;base64,
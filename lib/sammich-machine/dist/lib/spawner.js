export var SpawnerFrameSpawnMethod;
(function (SpawnerFrameSpawnMethod) {
    SpawnerFrameSpawnMethod[SpawnerFrameSpawnMethod["SAME"] = 0] = "SAME";
    SpawnerFrameSpawnMethod[SpawnerFrameSpawnMethod["RANDOM"] = 1] = "RANDOM";
    SpawnerFrameSpawnMethod[SpawnerFrameSpawnMethod["SEQUENTIAL"] = 2] = "SEQUENTIAL";
})(SpawnerFrameSpawnMethod || (SpawnerFrameSpawnMethod = {}));
export const createSpawner = (spriteEntityFactory, _options, game) => {
    console.log("createSpawner", game.runtime.getPlayerIndex(), game.runtime.getState().lastReproducedFrame);
    const [SCREEN_W, SCREEN_H] = game.runtime.getScreen().getSize();
    const state = {
        count: 0,
        totalDt: 0,
        dt: 0,
        startedFrame: 0,
        frame: 0,
        lastSpawnedFrame: 0,
        stopped: !!_options.autoStart
    };
    const _snapshots = [];
    const callbacks = {
        onStop: [],
        onSpawn: []
    };
    const options = { spawnIntervalMs: 1000, ..._options };
    const { frameMethod, pixelsPerSecond, stopOnCollision } = options;
    const spawnedItems = [];
    const frameMs = 1000 / game.runtime.getFps();
    const isLocked = (spriteEntity) => {
        return spawnedItems.find(spawnedItem => spawnedItem.spriteEntity === spriteEntity)?.locked;
    };
    const isSpawned = (spriteEntity) => {
        return spawnedItems.find(spawnedItem => spawnedItem.spriteEntity === spriteEntity);
    };
    const spawn = ({ offsetPixelPosition = [0, 0], layer }) => {
        const { pixelPosition } = options;
        const position = [pixelPosition[0] + offsetPixelPosition[0], pixelPosition[1] + offsetPixelPosition[1]];
        const spriteEntity = spriteEntityFactory.create({
            pixelPosition: position,
            layer: layer || options.layer,
            network: true
        });
        state.stopped = false;
        if (options.spawnRandomFrame?.length) {
            const index = game.randomInt(0, options.spawnRandomFrame.length - 1);
            console.log("RANDOM_FRAME", index, options.spawnRandomFrame);
            spriteEntity.applyFrame(options.spawnRandomFrame[index]);
        }
        state.count++;
        const spawnedItem = {
            ID: spriteEntity.ID,
            klass: spriteEntity.klassParams.klass,
            locked: false,
            startFrame: state.frame,
            detectCollisions: spriteEntityFactory.collisionBox && !!stopOnCollision,
            spriteEntity: spriteEntity,
        };
        spawnedItem.toJSON = getSpriteSnapshotToJSONFn(spawnedItem);
        spawnedItems.push(spawnedItem);
        if (stopOnCollision) {
            spawnedItem.spriteEntity.onCollide(getCollisionListener({ spriteEntity, spawnedItem }));
        }
        callbacks.onSpawn.forEach(f => f(spriteEntity));
        state.lastSpawnedFrame = game.runtime.getCurrentFrameNumber();
        return spriteEntity;
    };
    function getCollisionListener({ spawnedItem, spriteEntity }) {
        return ({ otherSprite }) => {
            spawnedItem.locked = true;
            console.log("Collision calling onStop", game.runtime.getPlayerIndex(), game.runtime.getState().lastReproducedFrame);
            callbacks.onStop.forEach(f => f(spriteEntity));
        };
    }
    function getSpawnedSprites() {
        return game.getSpriteEntities().filter((e) => isSpawned(e));
    }
    return {
        spawn,
        setOptions: (_options) => {
            Object.assign(options, _options);
        },
        stop: () => {
            console.log("STOP!!", game.runtime.getPlayerIndex(), game.runtime.getState().lastReproducedFrame);
            state.stopped = true;
            spawnedItems.forEach((_, index) => (_.locked = true));
        },
        start: () => {
            console.log("SPAWNER START", { ...state }, game.runtime.getPlayerIndex(), game.runtime.getState().lastReproducedFrame);
            state.count = 0;
            state.stopped = false;
            state.startedFrame = state.frame;
        },
        frame: (n) => {
            state.frame = n;
            if (state.stopped)
                return;
            if (state.startedFrame === undefined)
                return;
            const framesSinceStart = state.frame - state.startedFrame;
            const spawnIntervalFrames = Math.floor(options.spawnIntervalMs / frameMs);
            if (options.spawnIntervalMs && (((state.count + 1) * spawnIntervalFrames) < framesSinceStart)) {
                console.log("spawn", spawnIntervalFrames, state, state.count, state.frame);
                spawn({ layer: (options.layer || 1) + state.count });
            }
            spawnedItems.filter(i => !i.locked).forEach((spawnedItem, index) => {
                if (spawnedItem.locked)
                    return;
                const framesSinceStart = state.frame - spawnedItem.startFrame;
                const pixelsPerMs = options.pixelsPerSecond?.map(i => i / 1000);
                const newPixelPosition = [
                    spawnedItem.spriteEntity.createParams.pixelPosition[0] + Math.floor((framesSinceStart * frameMs) * pixelsPerMs[0]),
                    spawnedItem.spriteEntity.createParams.pixelPosition[1] + Math.floor((framesSinceStart * frameMs) * pixelsPerMs[1])
                ];
                spawnedItem.spriteEntity.setPixelPosition(...newPixelPosition);
                if ((newPixelPosition[0] > SCREEN_W) ||
                    (newPixelPosition[1] > SCREEN_H)) {
                    spawnedItem.locked = true;
                    spawnedItem.spriteEntity.destroy();
                    spawnedItems.splice(spawnedItems.indexOf(spawnedItem), 1);
                }
            });
            _snapshots.push({
                frameNumber: n,
                state: { ...state },
                spawnedItemsSnapshot: [...spawnedItems.map(s => s.toJSON())]
            });
        },
        isLocked,
        isSpawned,
        onCollide: () => { },
        onStop: (fn) => {
            callbacks.onStop.push(fn);
            return () => callbacks.onStop.splice(callbacks.onStop.indexOf(fn), 1);
        },
        onSpawn: (fn) => {
            callbacks.onSpawn.push(fn);
            return () => callbacks.onSpawn.splice(callbacks.onSpawn.indexOf(fn), 1);
        },
        cleanSprites: () => {
            spawnedItems.forEach(s => s.spriteEntity.destroy());
            spawnedItems.splice(0, spawnedItems.length);
        },
        rollbackToFrame: (frameNumber) => {
            console.log("spawner rollback from to", state.frame, frameNumber);
            const snapshot = _snapshots.find(snapshot => snapshot.frameNumber === frameNumber);
            console.log("spawner", state, JSON.stringify(snapshot, null, " "));
            Object.assign(state, snapshot.state);
            spawnedItems.splice(0, spawnedItems.length);
            const gameSpriteEntities = game.getSpriteEntities();
            console.log("gameSpriteEntities", gameSpriteEntities);
            snapshot.spawnedItemsSnapshot.forEach((spriteSnapshot) => {
                const spriteEntity = gameSpriteEntities.find((spriteEntity) => spriteEntity.ID === spriteSnapshot.ID);
                console.log("SPAWNER restoring snapshot sprite, to entity", spriteSnapshot.toJSON(), spriteEntity.toJSON());
                const spawnedItem = {
                    ...spriteSnapshot,
                    spriteEntity
                };
                spawnedItem.toJSON = getSpriteSnapshotToJSONFn(spawnedItem);
                spawnedItems.push(spawnedItem);
                if (stopOnCollision) {
                    spawnedItem.spriteEntity.onCollide(getCollisionListener({ spriteEntity, spawnedItem }));
                }
            });
            _snapshots.splice(frameNumber + 1, _snapshots.length - frameNumber - 1);
        },
        getSpawnedSprites,
        destroy: () => {
            spawnedItems.forEach(s => s.spriteEntity.destroy());
            spawnedItems.splice(0, spawnedItems.length);
            _snapshots.splice(0, _snapshots.length);
        }
    };
};
export function getPixelsPerSecond({ startPixelPosition, endPixelPosition, timeMs }) {
}
function getSpriteSnapshotToJSONFn(spawnedItem) {
    return () => {
        return { ...spawnedItem, spriteEntity: undefined };
    };
}
//# sourceMappingURL=data:application/json;base64,
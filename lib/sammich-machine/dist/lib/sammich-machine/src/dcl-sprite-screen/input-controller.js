import { engine, inputSystem } from '@dcl/sdk/ecs';
let callbacks = [];
const DEFAULT_KEYS_STATE = {
    [1]: false,
    [2]: false,
    [0]: false,
    [10]: false,
    [11]: false,
    [12]: false,
    [13]: false,
};
const state = {
    ...DEFAULT_KEYS_STATE
};
export function setupInputController() {
    engine.addSystem((dt) => {
        if (callbacks.length) {
            Object.keys(DEFAULT_KEYS_STATE).forEach((_key) => {
                const key = Number(_key);
                if (!state[key] && inputSystem.isPressed(key)) {
                    state[key] = true;
                    callbacks.forEach((fn) => fn(key, state[key]));
                }
                else if (state[key] && !inputSystem.isPressed(key)) {
                    state[key] = false;
                    callbacks.forEach((fn) => fn(key, state[key]));
                }
            });
        }
    });
}
export function getInputState() {
    return state;
}
export function onInputKeyEvent(fnCAllback) {
    callbacks.push(fnCAllback);
    return () => callbacks.splice(callbacks.indexOf(fnCAllback), 1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kY2wtc3ByaXRlLXNjcmVlbi9pbnB1dC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQWUsV0FBVyxFQUFDLE1BQU0sY0FBYyxDQUFBO0FBRTdELElBQUksU0FBUyxHQUFlLEVBQUUsQ0FBQztBQUUvQixNQUFNLGtCQUFrQixHQUFHO0lBQ3ZCLEdBQXdCLEVBQUUsS0FBSztJQUMvQixHQUEwQixFQUFFLEtBQUs7SUFDakMsR0FBd0IsRUFBRSxLQUFLO0lBQy9CLElBQXlCLEVBQUUsS0FBSztJQUNoQyxJQUF5QixFQUFFLEtBQUs7SUFDaEMsSUFBeUIsRUFBRSxLQUFLO0lBQ2hDLElBQXlCLEVBQUUsS0FBSztDQUNuQyxDQUFDO0FBRUYsTUFBTSxLQUFLLEdBQVE7SUFDZixHQUFHLGtCQUFrQjtDQUN4QixDQUFDO0FBRUYsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDcEIsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQTBCLEVBQUUsRUFBRTtnQkFDbkUsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQWtCLENBQUMsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQWtCLENBQUMsRUFBRSxDQUFDO29CQUMxRSxLQUFLLENBQUMsR0FBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFFakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDakUsQ0FBQztxQkFBTSxJQUFJLEtBQUssQ0FBQyxHQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQWtCLENBQUMsRUFBRSxDQUFDO29CQUNqRixLQUFLLENBQUMsR0FBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDbEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDakUsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhO0lBQ3pCLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLFVBQW9CO0lBQ2hELFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsT0FBTyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDbkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZW5naW5lLCBJbnB1dEFjdGlvbiwgaW5wdXRTeXN0ZW19IGZyb20gJ0BkY2wvc2RrL2VjcydcblxubGV0IGNhbGxiYWNrczogRnVuY3Rpb25bXSA9IFtdO1xuXG5jb25zdCBERUZBVUxUX0tFWVNfU1RBVEUgPSB7XG4gICAgW0lucHV0QWN0aW9uLklBX1BSSU1BUlldOiBmYWxzZSxcbiAgICBbSW5wdXRBY3Rpb24uSUFfU0VDT05EQVJZXTogZmFsc2UsXG4gICAgW0lucHV0QWN0aW9uLklBX1BPSU5URVJdOiBmYWxzZSxcbiAgICBbSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzNdOiBmYWxzZSxcbiAgICBbSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzRdOiBmYWxzZSxcbiAgICBbSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzVdOiBmYWxzZSxcbiAgICBbSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzZdOiBmYWxzZSxcbn07XG5cbmNvbnN0IHN0YXRlOiBhbnkgPSB7XG4gICAgLi4uREVGQVVMVF9LRVlTX1NUQVRFXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnB1dENvbnRyb2xsZXIoKSB7XG4gICAgZW5naW5lLmFkZFN5c3RlbSgoZHQpID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKERFRkFVTFRfS0VZU19TVEFURSkuZm9yRWFjaCgoX2tleTogSW5wdXRBY3Rpb24gfCBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBOdW1iZXIoX2tleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0ZVtrZXkgYXMgSW5wdXRBY3Rpb25dICYmIGlucHV0U3lzdGVtLmlzUHJlc3NlZChrZXkgYXMgSW5wdXRBY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlW2tleSBhcyBJbnB1dEFjdGlvbl0gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbikgPT4gZm4oa2V5LCBzdGF0ZVtrZXkgYXMgSW5wdXRBY3Rpb25dKSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlW2tleSBhcyBJbnB1dEFjdGlvbl0gJiYgIWlucHV0U3lzdGVtLmlzUHJlc3NlZChrZXkgYXMgSW5wdXRBY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlW2tleSBhcyBJbnB1dEFjdGlvbl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goKGZuKSA9PiBmbihrZXksIHN0YXRlW2tleSBhcyBJbnB1dEFjdGlvbl0pKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dFN0YXRlKCl7XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25JbnB1dEtleUV2ZW50KGZuQ0FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgY2FsbGJhY2tzLnB1c2goZm5DQWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IGNhbGxiYWNrcy5zcGxpY2UoY2FsbGJhY2tzLmluZGV4T2YoZm5DQWxsYmFjayksIDEpXG59Il19
import { Transform } from '@dcl/sdk/ecs';
import { Quaternion, Vector3 } from "@dcl/sdk/math";
export function getNormalizedLocalPoint(entity, hitScenePosition) {
    const { x, y, z } = hitScenePosition;
    const sceneHit = Vector3.create(x, y, z);
    let currentTransform = Transform.get(entity);
    let currentEntity = entity;
    const hierarchyPositions = [];
    let hierarchyScales = [];
    let hierarchyRotations = [];
    let hitVector = Vector3.create(x, y, z);
    let position = currentTransform.position;
    let absolutePosition = currentTransform.position;
    hierarchyPositions.push(Transform.get(entity).position);
    hierarchyScales.push(Transform.get(entity).scale);
    hierarchyRotations.push(Transform.get(entity).rotation);
    let accumulatedScale = Vector3.One();
    while (currentTransform.parent) {
        currentEntity = currentTransform.parent;
        currentTransform = Transform.get(currentEntity);
        hierarchyPositions.unshift(currentTransform.position);
        hierarchyScales.unshift(currentTransform.scale);
        hierarchyRotations.unshift(currentTransform.rotation);
    }
    console.log("hierarchyScales", hierarchyScales);
    console.log("hierarchyPositions,", hierarchyPositions);
    console.log("hierarchyRotations,", hierarchyRotations);
    const totalHierarchyScale = hierarchyScales.reduce((acc, current) => Vector3.multiply(current, acc), Vector3.One());
    let previousScaleResult = Vector3.One();
    hierarchyScales = hierarchyScales.map((v, i) => {
        console.log("MULT", v, previousScaleResult, Vector3.multiply(v, previousScaleResult || Vector3.One()));
        return previousScaleResult = Vector3.multiply(v, previousScaleResult || Vector3.One());
    });
    console.log("hierarchyScales2", hierarchyScales);
    console.log("hierarchyPositions", hierarchyPositions);
    const parentR = hierarchyPositions.reduce((acc, current, index) => {
        const { x, y, z, w } = hierarchyRotations[index];
        const inverseRotation = Quaternion.create(-x, -y, -z, w);
        acc = Vector3.add(acc, Vector3.multiply(hierarchyScales[index - 1] || Vector3.One(), current));
        acc = Vector3.rotate(acc, inverseRotation);
        return acc;
    }, Vector3.Zero());
    console.log("parentR", parentR);
    const totalHierarchyRotation = hierarchyRotations.reduce((acc, current) => {
        return Quaternion.multiply(acc, current);
    }, Quaternion.Zero());
    console.log("totalHierarchyRotation", totalHierarchyRotation);
    console.log("totalHierarchyScale", totalHierarchyScale);
    console.log("parentRR", Vector3.divide(parentR, totalHierarchyScale));
    console.log("SOL", Vector3.divide(Vector3.subtract(Vector3.rotate(hitVector, totalHierarchyRotation), parentR), totalHierarchyScale));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGNsLXNwcml0ZS1zY3JlZW4vbG9jYWwtcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQVFILFNBQVMsRUFFWixNQUFNLGNBQWMsQ0FBQTtBQUNyQixPQUFPLEVBQUMsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUlsRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBYSxFQUFFLGdCQUF3QjtJQUMzRSxNQUFNLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsR0FBRyxnQkFBZ0IsQ0FBQztJQUNqQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFekMsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUUzQixNQUFNLGtCQUFrQixHQUFTLEVBQUUsQ0FBQztJQUNwQyxJQUFJLGVBQWUsR0FBUyxFQUFFLENBQUM7SUFDL0IsSUFBSSxrQkFBa0IsR0FBUyxFQUFFLENBQUM7SUFDbEMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLElBQUksUUFBUSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztJQUN6QyxJQUFJLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztJQUVqRCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFD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QUFHLENBQUMsU0FBUyxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLE1BQU0sc0JBQXNCLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxFQUFFO1FBQ3JFLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQTtJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBR3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDOUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsRUFDL0MsT0FBTyxDQUFDLEVBQUMsbUJBQW1CLENBQUUsQ0FBQyxDQUFBO0FBQ3pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGVuZ2luZSxcbiAgICBNYXRlcmlhbCxcbiAgICBNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGUsXG4gICAgTWVzaFJlbmRlcmVyLFxuICAgIFBCTWF0ZXJpYWxfUGJyTWF0ZXJpYWwsXG4gICAgVGV4dHVyZUZpbHRlck1vZGUsXG4gICAgVGV4dHVyZVdyYXBNb2RlLFxuICAgIFRyYW5zZm9ybSxcbiAgICBFbnRpdHlcbn0gZnJvbSAnQGRjbC9zZGsvZWNzJ1xuaW1wb3J0IHtRdWF0ZXJuaW9uLCBWZWN0b3IzfSBmcm9tIFwiQGRjbC9zZGsvbWF0aFwiO1xuaW1wb3J0IHtwaXBlfSBmcm9tIFwiLi9mdW5jdGlvbmFsXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRMb2NhbFBvaW50KGVudGl0eTpFbnRpdHksIGhpdFNjZW5lUG9zaXRpb246VmVjdG9yMyl7XG4gICAgY29uc3Qge3gseSx6fSA9IGhpdFNjZW5lUG9zaXRpb247XG4gICAgY29uc3Qgc2NlbmVIaXQgPSBWZWN0b3IzLmNyZWF0ZSh4LCB5LCB6KTtcblxuICAgIGxldCBjdXJyZW50VHJhbnNmb3JtID0gVHJhbnNmb3JtLmdldChlbnRpdHkpO1xuICAgIGxldCBjdXJyZW50RW50aXR5ID0gZW50aXR5O1xuXG4gICAgY29uc3QgaGllcmFyY2h5UG9zaXRpb25zOmFueVtdID0gW107XG4gICAgbGV0IGhpZXJhcmNoeVNjYWxlczphbnlbXSA9IFtdO1xuICAgIGxldCBoaWVyYXJjaHlSb3RhdGlvbnM6YW55W10gPSBbXTtcbiAgICBsZXQgaGl0VmVjdG9yID0gVmVjdG9yMy5jcmVhdGUoeCwgeSwgeik7XG4gICAgbGV0IHBvc2l0aW9uID0gY3VycmVudFRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICBsZXQgYWJzb2x1dGVQb3NpdGlvbiA9IGN1cnJlbnRUcmFuc2Zvcm0ucG9zaXRpb247XG5cbiAgICBoaWVyYXJjaHlQb3NpdGlvbnMucHVzaChUcmFuc2Zvcm0uZ2V0KGVudGl0eSkucG9zaXRpb24pO1xuICAgIGhpZXJhcmNoeVNjYWxlcy5wdXNoKFRyYW5zZm9ybS5nZXQoZW50aXR5KS5zY2FsZSk7XG4gICAgaGllcmFyY2h5Um90YXRpb25zLnB1c2goVHJhbnNmb3JtLmdldChlbnRpdHkpLnJvdGF0aW9uKTtcblxuICAgIGxldCBhY2N1bXVsYXRlZFNjYWxlID0gVmVjdG9yMy5PbmUoKTtcbiAgICB3aGlsZShjdXJyZW50VHJhbnNmb3JtLnBhcmVudCl7XG4gICAgICAgIGN1cnJlbnRFbnRpdHkgPSBjdXJyZW50VHJhbnNmb3JtLnBhcmVudDtcbiAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IFRyYW5zZm9ybS5nZXQoY3VycmVudEVudGl0eSk7XG5cbiAgICAgICAgaGllcmFyY2h5UG9zaXRpb25zLnVuc2hpZnQoY3VycmVudFRyYW5zZm9ybS5wb3NpdGlvbik7XG4gICAgICAgIGhpZXJhcmNoeVNjYWxlcy51bnNoaWZ0KGN1cnJlbnRUcmFuc2Zvcm0uc2NhbGUpO1xuICAgICAgICBoaWVyYXJjaHlSb3RhdGlvbnMudW5zaGlmdChjdXJyZW50VHJhbnNmb3JtLnJvdGF0aW9uKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJoaWVyYXJjaHlTY2FsZXNcIiwgaGllcmFyY2h5U2NhbGVzKTtcbiAgICBjb25zb2xlLmxvZyhcImhpZXJhcmNoeVBvc2l0aW9ucyxcIixoaWVyYXJjaHlQb3NpdGlvbnMpO1xuICAgIGNvbnNvbGUubG9nKFwiaGllcmFyY2h5Um90YXRpb25zLFwiLGhpZXJhcmNoeVJvdGF0aW9ucyk7XG5cbiAgICBjb25zdCB0b3RhbEhpZXJhcmNoeVNjYWxlID0gaGllcmFyY2h5U2NhbGVzLnJlZHVjZSgoYWNjLGN1cnJlbnQpPT5WZWN0b3IzLm11bHRpcGx5KGN1cnJlbnQsIGFjYyksVmVjdG9yMy5PbmUoKSk7XG4gICAgbGV0IHByZXZpb3VzU2NhbGVSZXN1bHQgPSBWZWN0b3IzLk9uZSgpO1xuICAgIGhpZXJhcmNoeVNjYWxlcyA9IGhpZXJhcmNoeVNjYWxlcy5tYXAoKHYsaSk9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJNVUxUXCIsdiwgcHJldmlvdXNTY2FsZVJlc3VsdCwgVmVjdG9yMy5tdWx0aXBseSh2LCBwcmV2aW91c1NjYWxlUmVzdWx0IHx8VmVjdG9yMy5PbmUoKSkpXG4gICAgICAgIHJldHVybiBwcmV2aW91c1NjYWxlUmVzdWx0ID0gVmVjdG9yMy5tdWx0aXBseSh2LCBwcmV2aW91c1NjYWxlUmVzdWx0IHx8VmVjdG9yMy5PbmUoKSlcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKFwiaGllcmFyY2h5U2NhbGVzMlwiLCBoaWVyYXJjaHlTY2FsZXMpO1xuICAgIGNvbnNvbGUubG9nKFwiaGllcmFyY2h5UG9zaXRpb25zXCIsaGllcmFyY2h5UG9zaXRpb25zKVxuICAgIGNvbnN0IHBhcmVudFI6VmVjdG9yMyA9IGhpZXJhcmNoeVBvc2l0aW9ucy5yZWR1Y2UoKGFjYywgY3VycmVudCwgaW5kZXgpPT57XG4gICAgICAgIGNvbnN0IHt4LHkseix3fSA9IGhpZXJhcmNoeVJvdGF0aW9uc1tpbmRleF07XG4gICAgICAgIGNvbnN0IGludmVyc2VSb3RhdGlvbiA9IFF1YXRlcm5pb24uY3JlYXRlKC14LC15LC16LHcpO1xuXG4gICAgICAgIGFjYyA9IFZlY3RvcjMuYWRkKGFjYyxcbiAgICAgICAgICAgIFZlY3RvcjMubXVsdGlwbHkoaGllcmFyY2h5U2NhbGVzW2luZGV4LTFdIHx8VmVjdG9yMy5PbmUoKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50XG4gICAgICAgICAgICApKVxuICAgICAgICBhY2MgPSBWZWN0b3IzLnJvdGF0ZShhY2MsIGludmVyc2VSb3RhdGlvbilcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBWZWN0b3IzLlplcm8oKSk7XG5cbiAgICBjb25zb2xlLmxvZyhcInBhcmVudFJcIixwYXJlbnRSKTtcblxuICAgIGNvbnN0IHRvdGFsSGllcmFyY2h5Um90YXRpb24gPSBoaWVyYXJjaHlSb3RhdGlvbnMucmVkdWNlKChhY2MsIGN1cnJlbnQpPT57XG4gICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5KGFjYywgY3VycmVudCk7XG4gICAgfSwgUXVhdGVybmlvbi5aZXJvKCkpO1xuICAgIGNvbnNvbGUubG9nKFwidG90YWxIaWVyYXJjaHlSb3RhdGlvblwiLHRvdGFsSGllcmFyY2h5Um90YXRpb24pXG4gICAgY29uc29sZS5sb2coXCJ0b3RhbEhpZXJhcmNoeVNjYWxlXCIsdG90YWxIaWVyYXJjaHlTY2FsZSlcbiAgICBjb25zb2xlLmxvZyhcInBhcmVudFJSXCIsIFZlY3RvcjMuZGl2aWRlKHBhcmVudFIsIHRvdGFsSGllcmFyY2h5U2NhbGUpKTtcblxuICAgIC8vLy9UT0RPIFBPUiBGSUlJSU5cbiAgICBjb25zb2xlLmxvZyhcIlNPTFwiLCBWZWN0b3IzLmRpdmlkZShWZWN0b3IzLnN1YnRyYWN0KFxuICAgICAgICBWZWN0b3IzLnJvdGF0ZShoaXRWZWN0b3IsIHRvdGFsSGllcmFyY2h5Um90YXRpb24pXG4gICAgICAgICwgcGFyZW50UiksdG90YWxIaWVyYXJjaHlTY2FsZSApKVxufVxuXG5cbi8qXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb3JtYWxpemVkTG9jYWxQb2ludChlbnRpdHk6RW50aXR5LCBoaXRTY2VuZVBvc2l0aW9uOlZlY3RvcjMpe1xuICAgIGNvbnN0IHt4LHksen0gPSBoaXRTY2VuZVBvc2l0aW9uO1xuICAgIGNvbnN0IHJlc3VsdCA9IGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoVHJhbnNmb3JtKTtcbiAgICBjb25zb2xlLmxvZyhcInJlc3VsdFwiLCByZXN1bHQpO1xuXG5cbiAgICBsZXQgY3VycmVudFRyYW5zZm9ybSA9IFRyYW5zZm9ybS5nZXQoZW50aXR5KTtcblxuICAgIGNvbnN0IGhpdFZlY3RvciA9IFZlY3RvcjMuY3JlYXRlKHgsIHksIHopO1xuXG4gICAgbGV0IG5vcm1hbGl6ZWRIaXRQb2ludDtcbiAgICBsZXQgbG9jYWxIaXRQb2ludDtcbiAgICBub3JtYWxpemVkSGl0UG9pbnQgPSBWZWN0b3IzLnN1YnRyYWN0KGhpdFZlY3RvciwgY3VycmVudFRyYW5zZm9ybS5wb3NpdGlvbik7XG4gICAgbm9ybWFsaXplZEhpdFBvaW50ID0gVmVjdG9yMy5kaXZpZGUobm9ybWFsaXplZEhpdFBvaW50LCBjdXJyZW50VHJhbnNmb3JtLnNjYWxlKTtcblxuICAgIGxldCBjdXJyZW50RW50aXR5OmFueSA9IGVudGl0eTtcblxuICAgIGNvbnNvbGUubG9nKFwibm9ybWFsaXplZEhpdFBvaW50MVwiLG5vcm1hbGl6ZWRIaXRQb2ludClcbiAgICBjb25zb2xlLmxvZyhcImNoaWxkRW50aXR5XCIsZW50aXR5KTtcblxuICAgIGxldCBub3JtYWxpemVkUG9zaXRpb24gPSBWZWN0b3IzLmRpdmlkZShjdXJyZW50VHJhbnNmb3JtLnBvc2l0aW9uLCBjdXJyZW50VHJhbnNmb3JtLnNjYWxlKTtcbiAgICB3aGlsZShjdXJyZW50VHJhbnNmb3JtLnBhcmVudCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3VycmVudEVudGl0eVwiLCBjdXJyZW50RW50aXR5KTtcbiAgICAgICAgY3VycmVudEVudGl0eSA9IGN1cnJlbnRUcmFuc2Zvcm0ucGFyZW50O1xuICAgICAgICBjdXJyZW50VHJhbnNmb3JtID0gVHJhbnNmb3JtLmdldChjdXJyZW50RW50aXR5KTtcbiAgICAgICAgbm9ybWFsaXplZFBvc2l0aW9uID0gVmVjdG9yMy5tdWx0aXBseShub3JtYWxpemVkUG9zaXRpb24sIFZlY3RvcjMuZGl2aWRlKGN1cnJlbnRUcmFuc2Zvcm0ucG9zaXRpb24sIGN1cnJlbnRUcmFuc2Zvcm0uc2NhbGUpKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwibm9ybWFsaXplZEhpdFBvaW50XCIsIFZlY3RvcjMubXVsdGlwbHkobm9ybWFsaXplZEhpdFBvaW50LCBub3JtYWxpemVkUG9zaXRpb24pIClcbiAgICBjb25zb2xlLmxvZyhcIm5vcm1hbGl6ZWRQb2lzaXRpb25cIixub3JtYWxpemVkUG9zaXRpb24pXG59XG4qL1xuXG5cbi8qKlxuICogZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZExvY2FsSGl0UG9pbnQoaGl0OmFueSwgcGxhbmVUcmFuc2Zvcm06VHJhbnNmb3JtKXtcbiAqICAgY29uc3QgcGxhbmVQb3NpdGlvbiA9IHBsYW5lVHJhbnNmb3JtLnBvc2l0aW9uLmNsb25lKCk7XG4gKiAgIGNvbnN0IHBsYW5lU2NhbGUgPSBwbGFuZVRyYW5zZm9ybS5zY2FsZS5jbG9uZSgpO1xuICogICBjb25zdCBwbGFuZVJvdGF0aW9uID0gcGxhbmVUcmFuc2Zvcm0ucm90YXRpb24uY2xvbmUoKTtcbiAqICAgY29uc3Qge3gseSx6fSA9IHBsYW5lUm90YXRpb24uZXVsZXJBbmdsZXM7XG4gKiAgIGNvbnN0IGludmVyc2VSb3RhdGlvbiA9IFF1YXRlcm5pb24uRXVsZXIoLXgsLXksLXopO1xuICogICBjb25zdCB7aGl0UG9pbnR9ID0gaGl0O1xuICogICBjb25zdCBoaXRWZWN0b3IgPSBuZXcgVmVjdG9yMyhoaXRQb2ludC54LCBoaXRQb2ludC55LCBoaXRQb2ludC56KTtcbiAqICAgcmV0dXJuIGhpdFZlY3Rvci5zdWJ0cmFjdChwbGFuZVBvc2l0aW9uKS5yb3RhdGUoaW52ZXJzZVJvdGF0aW9uKS5kaXZpZGUocGxhbmVTY2FsZSkuc3VidHJhY3QobmV3IFZlY3RvcjMoLTAuNSwgMC41LDApKS5tdWx0aXBseShuZXcgVmVjdG9yMygxLC0xLC0xKSk7XG4gKiB9XG4gKi8iXX0=
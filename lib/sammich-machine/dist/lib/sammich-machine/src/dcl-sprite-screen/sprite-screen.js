import { engine, Material, MeshCollider, MeshRenderer, PointerEvents, pointerEventsSystem, TextShape, Transform } from "@dcl/sdk/ecs";
import { Color4, Vector3 } from "@dcl/sdk/math";
import { createSpriteAnimationUVSGetter, getUvsFromSprite, UVS_BACK } from "./sprite-util";
export function createSpriteScreen({ transform, spriteMaterial, spriteDefinition }) {
    console.log("createSpriteScreen__1");
    const screenEntity = createSpritePlane({ spriteMaterial, spriteDefinition, transform });
    const state = {
        spriteDefinition
    };
    MeshCollider.setPlane(screenEntity);
    const screenSpriteDefinition = spriteDefinition;
    const SPRITE_BUTTON_POINTER_OPTIONS = { pointerEvents: [{
                eventType: 1,
                eventInfo: {
                    button: 0,
                    showFeedback: true
                }
            }] };
    const transformBackup = (JSON.parse(JSON.stringify(transform)));
    return {
        setBackgroundSprite: ({ spriteDefinition }) => {
            const mutablePlane = MeshRenderer.getMutable(screenEntity);
            state.spriteDefinition = spriteDefinition;
            if (mutablePlane.mesh)
                mutablePlane.mesh[mutablePlane.mesh.$case].uvs = getUvsFromSprite({ spriteDefinition, back: UVS_BACK.MIRROR });
        },
        getSize: () => [state.spriteDefinition.w, state.spriteDefinition.h],
        addSprite: ({ ID, spriteDefinition, onClick, pixelPosition, layer, network, hoverText, zoom = [1, 1] }) => {
            const normalizedPixelPosition = normalizePixelPosition(pixelPosition[0], pixelPosition[1], layer);
            const state = {
                pixelPosition,
                network,
                layer,
                frame: 0,
                destroyed: false
            };
            const spriteEntity = createSpritePlane({
                spriteDefinition,
                transform: {
                    parent: screenEntity,
                    scale: Vector3.create((spriteDefinition.w / screenSpriteDefinition.w) * zoom[0], (spriteDefinition.h / screenSpriteDefinition.h) * zoom[1], 1),
                    position: Vector3.create(...normalizedPixelPosition)
                },
                spriteMaterial
            });
            let spriteAnimationUVS;
            if (spriteDefinition.columns) {
                spriteAnimationUVS = createSpriteAnimationUVSGetter({
                    spriteDefinition,
                    back: UVS_BACK.MIRROR
                });
            }
            if (onClick) {
                console.log("0mClick", spriteEntity);
                MeshCollider.setPlane(spriteEntity, [1]);
                PointerEvents.create(spriteEntity, SPRITE_BUTTON_POINTER_OPTIONS);
                pointerEventsSystem.onPointerDown({ entity: spriteEntity, opts: { hoverText, showFeedback: true, button: 0 } }, (event) => onClick(event));
            }
            else {
                MeshCollider.setPlane(spriteEntity, [0]);
            }
            return {
                ID,
                destroy: () => {
                    engine.removeEntity(spriteEntity);
                    state.destroyed = true;
                },
                applyFrame: (n) => {
                    if (!spriteAnimationUVS)
                        return;
                    state.frame = n;
                    if (state.destroyed)
                        return;
                    const mutablePlane = MeshRenderer.getMutable(spriteEntity);
                    if (mutablePlane.mesh)
                        mutablePlane.mesh[mutablePlane.mesh.$case].uvs = spriteAnimationUVS(n);
                },
                getFrame: () => state.frame,
                getLayer: () => state.layer,
                hide: () => {
                    Transform.getMutable(spriteEntity).position.y = Number.MIN_SAFE_INTEGER;
                },
                show: () => {
                    Transform.getMutable(spriteEntity).position.y = normalizedPixelPosition[1];
                },
                getPixelPosition: () => state.pixelPosition,
                setPixelPosition: (px, py) => {
                    if (state.destroyed)
                        return;
                    state.pixelPosition = [px, py];
                    const mutablePosition = Transform.getMutable(spriteEntity).position;
                    const normalizedPixelPosition = normalizePixelPosition(px, py, layer);
                    mutablePosition.x = normalizedPixelPosition[0];
                    mutablePosition.y = normalizedPixelPosition[1];
                },
                getNetwork: () => state.network,
                setNetwork: (value) => state.network = value,
                setZoom: (zoom) => {
                    Transform.getMutable(spriteEntity).scale.x = (spriteDefinition.w / screenSpriteDefinition.w) * zoom[0];
                    Transform.getMutable(spriteEntity).scale.y = (spriteDefinition.h / screenSpriteDefinition.h) * zoom[1];
                }
            };
            function normalizePixelPosition(xPixels, yPixels, layer) {
                const offsetX = (spriteDefinition.w / screenSpriteDefinition.w) / 2 - 0.5;
                const offsetY = 0.5 - (spriteDefinition.h / screenSpriteDefinition.h) / 2;
                return [
                    offsetX + (xPixels / screenSpriteDefinition.w),
                    offsetY - (yPixels / screenSpriteDefinition.h),
                    -layer * 0.001
                ];
            }
        },
        addText: ({ pixelPosition = [0, 0], textAlign = 0, text = "FOO", textColor = [0, 0, 0, 1], fontSize = 0.5, layer = 10 }) => {
            const normalizedPosition = normalizePixelPositionForText(pixelPosition[0], pixelPosition[1], layer);
            const textEntity = engine.addEntity();
            TextShape.create(textEntity, {
                text,
                textAlign,
                textColor: Color4.create(...textColor),
                fontSize,
                font: 2
            });
            Transform.create(textEntity, {
                parent: screenEntity,
                position: Vector3.create(...normalizedPosition)
            });
            return {
                destroy: () => {
                    engine.removeEntity(textEntity);
                },
                setText: (value) => TextShape.getMutable(textEntity).text = value.toString(),
                setPixelPosition: (px, py) => {
                    const normalizedPosition = normalizePixelPositionForText(px, py, layer);
                    console.log("text normalizedPosition", px, py, normalizedPosition);
                    const mutablePosition = Transform.getMutable(textEntity).position;
                    mutablePosition.x = normalizedPosition[0];
                    mutablePosition.y = normalizedPosition[1];
                },
                hide: () => Transform.getMutable(textEntity).position.y = -10000,
                show: () => Transform.getMutable(textEntity).position.y = normalizedPosition[1]
            };
            function normalizePixelPositionForText(xPixels, yPixels, layer) {
                return [
                    (xPixels - (screenSpriteDefinition.w / 2)) * (1 / screenSpriteDefinition.w),
                    -(yPixels + (screenSpriteDefinition.h / 2)) * (1 / screenSpriteDefinition.h) + 1,
                    -layer * 0.001
                ];
            }
        },
        getEntity: () => screenEntity,
        hide: () => {
            Transform.getMutable(screenEntity).position.y = Number.MIN_SAFE_INTEGER;
        },
        show: () => {
            console.log("show lobby screen", transformBackup.position?.y);
            Transform.getMutable(screenEntity).position.y = (transformBackup.position?.y || 0);
        },
        destroy: () => {
            engine.removeEntity(screenEntity);
        }
    };
}
export function createSpritePlane({ spriteDefinition, transform, spriteMaterial }) {
    const planeEntity = engine.addEntity();
    MeshRenderer.setPlane(planeEntity, getUvsFromSprite({
        spriteDefinition, back: UVS_BACK.MIRROR
    }));
    Transform.create(planeEntity, transform);
    Material.setPbrMaterial(planeEntity, spriteMaterial);
    return planeEntity;
}
//# sourceMappingURL=data:application/json;base64,
import { engine, Material, MeshRenderer, TextShape, Transform, VideoPlayer } from "@dcl/sdk/ecs";
import { Vector3, Color3 } from "@dcl/sdk/math";
import { timers } from "@dcl-sdk/utils";
export const createInstructionScreen = ({ transform, gameAlias, gameInstructions, playerIndex, baseInstructionVideoURL = "https://sammich.pro/instruction-videos" }) => {
    console.log("createInstructionScreen", gameAlias);
    const state = {
        timeoutStartedTime: 0,
        waitingOther: false,
        timeout: 0
    };
    const { parent, position, rotation, scale } = transform;
    let screenEntity = engine.addEntity();
    const WAITING_BOTH_PLAYERS_TEXT = `<b>INSTRUCTIONS</b>:\n${gameInstructions}\n\n\n\nPress any key when you are ready to play`;
    const WAITING_ONE_PLAYER_TEXT = `<b>INSTRUCTIONS</b>:\n${gameInstructions}\n\n\n\nWaiting other player...`;
    const WAITING_FROM_NON_PLAYER = `<b>INSTRUCTIONS</b>:\n${gameInstructions}\n\n\n\nWaiting players ...`;
    MeshRenderer.setPlane(screenEntity);
    Transform.create(screenEntity, { parent, position, rotation, scale });
    VideoPlayer.create(screenEntity, {
        src: `${baseInstructionVideoURL}/${gameAlias}.mp4`,
        playing: true,
    });
    const videoTexture = Material.Texture.Video({ videoPlayerEntity: screenEntity });
    Material.setPbrMaterial(screenEntity, {
        texture: videoTexture,
        roughness: 1.0,
        specularIntensity: 0,
        metallic: 0,
    });
    const instructionsTextEntity = engine.addEntity();
    TextShape.create(instructionsTextEntity, {
        text: ~playerIndex ? WAITING_BOTH_PLAYERS_TEXT : WAITING_FROM_NON_PLAYER,
        fontSize: 0.4,
        textAlign: 1,
        shadowColor: Color3.Black(),
        shadowOffsetY: 0.1,
        shadowOffsetX: 0.1,
        shadowBlur: 10
    });
    Transform.create(instructionsTextEntity, { parent: screenEntity, position: Vector3.create(0, 0.45, -0.001) });
    let countdownInterval = 0;
    const setTimeout = (timeout) => {
        console.log("countdown", setTimeout);
        state.timeout = timeout;
        if (countdownInterval)
            timers.clearInterval(countdownInterval);
        state.timeoutStartedTime = Date.now();
        countdownInterval = timers.setInterval(() => {
            if (~playerIndex) {
                if (state.waitingOther) {
                    TextShape.getMutable(instructionsTextEntity).text = WAITING_ONE_PLAYER_TEXT + `\n\n${formatTimeout(state.timeout - (Date.now() - state.timeoutStartedTime))}`;
                }
                else {
                    TextShape.getMutable(instructionsTextEntity).text = WAITING_BOTH_PLAYERS_TEXT + `\n\n${formatTimeout(state.timeout - (Date.now() - state.timeoutStartedTime))}`;
                }
            }
            else {
                TextShape.getMutable(instructionsTextEntity).text = WAITING_FROM_NON_PLAYER + `\n\n${formatTimeout(state.timeout - (Date.now() - state.timeoutStartedTime))}`;
            }
        }, 300);
    };
    return {
        destroy: () => {
            engine.removeEntity(instructionsTextEntity);
            engine.removeEntity(screenEntity);
            timers.clearInterval(countdownInterval);
            countdownInterval = 0;
            console.log("video screen destroy");
        },
        getState: () => state,
        showWaitingForOtherPlayer: ({ timeout = 20000 }) => {
            state.waitingOther = true;
            TextShape.getMutable(instructionsTextEntity).text = WAITING_ONE_PLAYER_TEXT;
            if (timeout) {
                setTimeout(timeout);
            }
        },
        setTimeout
    };
};
function formatTimeout(ms) {
    return `<b>${Math.max(0, Math.floor(ms / 1000))}</b>`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLXNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kY2wtc3ByaXRlLXNjcmVlbi9pbnN0cnVjdGlvbnMtc2NyZWVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBaUIsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFOUcsT0FBTyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQ25DLEVBQ0ksU0FBUyxFQUNULFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLHVCQUF1QixHQUFHLHdDQUF3QyxFQU9yRSxFQUFFLEVBQUU7SUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sS0FBSyxHQUFHO1FBQ1Ysa0JBQWtCLEVBQUMsQ0FBQztRQUNwQixZQUFZLEVBQUMsS0FBSztRQUNsQixPQUFPLEVBQUMsQ0FBQztLQUNaLENBQUE7SUFDRCxNQUFNLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ3RELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN0QyxNQUFNLHlCQUF5QixHQUFHLHlCQUF5QixnQkFBZ0Isa0RBQWtELENBQUM7SUFDOUgsTUFBTSx1QkFBdUIsR0FBRyx5QkFBeUIsZ0JBQWdCLGlDQUFpQyxDQUFDO0lBQzNHLE1BQU0sdUJBQXVCLEdBQUcseUJBQXlCLGdCQUFnQiw2QkFBNkIsQ0FBQztJQUV2RyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXBDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUVwRSxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtRQUM3QixHQUFHLEVBQUUsR0FBRyx1QkFBdUIsSUFBSSxTQUFTLE1BQU07UUFDbEQsT0FBTyxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBQyxpQkFBaUIsRUFBRSxZQUFZLEVBQUMsQ0FBQyxDQUFBO0lBQzlFLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFNBQVMsRUFBRSxHQUFHO1FBQ2QsaUJBQWlCLEVBQUUsQ0FBQztRQUNwQixRQUFRLEVBQUUsQ0FBQztLQUNkLENBQUMsQ0FBQztJQUVILE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2xELFNBQVMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUU7UUFDckMsSUFBSSxFQUFDLENBQUMsV0FBVyxDQUFBLENBQUMsQ0FBQSx5QkFBeUIsQ0FBQSxDQUFDLENBQUEsdUJBQXVCO1FBQ25FLFFBQVEsRUFBQyxHQUFHO1FBQ1osU0FBUyxHQUE2QjtRQUN0QyxXQUFXLEVBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUMxQixhQUFhLEVBQUMsR0FBRztRQUNqQixhQUFhLEVBQUMsR0FBRztRQUNqQixVQUFVLEVBQUMsRUFBRTtLQUNoQixDQUFDLENBQUM7SUFDSCxTQUFTLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFLEVBQUMsTUFBTSxFQUFDLFlBQVksRUFBRSxRQUFRLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFDLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3pHLElBQUksaUJBQWlCLEdBQVUsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBYyxFQUFDLEVBQUU7UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDbkMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBRyxpQkFBaUI7WUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUQsS0FBSyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN0QyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUUsRUFBRTtZQUN2QyxJQUFHLENBQUMsV0FBVyxFQUFDLENBQUM7Z0JBQ2IsSUFBRyxLQUFLLENBQUMsWUFBWSxFQUFDLENBQUM7b0JBQ25CLFNBQVMsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLEdBQUcsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xLLENBQUM7cUJBQUksQ0FBQztvQkFDRixTQUFTLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxHQUFHLHlCQUF5QixHQUFFLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNuSyxDQUFDO1lBQ0wsQ0FBQztpQkFBSSxDQUFDO2dCQUNGLFNBQVMsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLEdBQUUsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDakssQ0FBQztRQUNMLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUMsQ0FBQztJQUNGLE9BQU87UUFDSCxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1YsTUFBTSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3hDLGlCQUFpQixHQUFHLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELFFBQVEsRUFBQyxHQUFFLEVBQUUsQ0FBQSxLQUFLO1FBQ2xCLHlCQUF5QixFQUFDLENBQUMsRUFBQyxPQUFPLEdBQUcsS0FBSyxFQUFDLEVBQUMsRUFBRTtZQUMzQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUMxQixTQUFTLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxHQUFHLHVCQUF1QixDQUFDO1lBQzVFLElBQUcsT0FBTyxFQUFDLENBQUM7Z0JBQ1IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3hCLENBQUM7UUFDTCxDQUFDO1FBQ0QsVUFBVTtLQUNiLENBQUE7QUFDTCxDQUFDLENBQUE7QUFFRCxTQUFTLGFBQWEsQ0FBQyxFQUFTO0lBQzVCLE9BQU8sTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZW5naW5lLCBNYXRlcmlhbCwgTWVzaFJlbmRlcmVyLCBUZXh0QWxpZ25Nb2RlLCBUZXh0U2hhcGUsIFRyYW5zZm9ybSwgVmlkZW9QbGF5ZXJ9IGZyb20gXCJAZGNsL3Nkay9lY3NcIjtcbmltcG9ydCB7VHJhbnNmb3JtVHlwZX0gZnJvbSBcIkBkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9tYW51YWwvVHJhbnNmb3JtXCI7XG5pbXBvcnQge1ZlY3RvcjMsIENvbG9yM30gZnJvbSBcIkBkY2wvc2RrL21hdGhcIjtcbmltcG9ydCB7dGltZXJzfSBmcm9tIFwiQGRjbC1zZGsvdXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUluc3RydWN0aW9uU2NyZWVuID0gKFxuICAgIHtcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICBnYW1lQWxpYXMsXG4gICAgICAgIGdhbWVJbnN0cnVjdGlvbnMsXG4gICAgICAgIHBsYXllckluZGV4LFxuICAgICAgICBiYXNlSW5zdHJ1Y3Rpb25WaWRlb1VSTCA9IFwiaHR0cHM6Ly9zYW1taWNoLnByby9pbnN0cnVjdGlvbi12aWRlb3NcIlxuICAgIH06IHtcbiAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm1UeXBlLFxuICAgICAgICBnYW1lQWxpYXM6IHN0cmluZyxcbiAgICAgICAgZ2FtZUluc3RydWN0aW9uczogc3RyaW5nLFxuICAgICAgICBwbGF5ZXJJbmRleDogbnVtYmVyLFxuICAgICAgICBiYXNlSW5zdHJ1Y3Rpb25WaWRlb1VSTDpzdHJpbmdcbiAgICB9KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJjcmVhdGVJbnN0cnVjdGlvblNjcmVlblwiLCBnYW1lQWxpYXMpO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICB0aW1lb3V0U3RhcnRlZFRpbWU6MCxcbiAgICAgICAgd2FpdGluZ090aGVyOmZhbHNlLFxuICAgICAgICB0aW1lb3V0OjBcbiAgICB9XG4gICAgY29uc3Qge3BhcmVudCwgcG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZX0gPSB0cmFuc2Zvcm07XG4gICAgbGV0IHNjcmVlbkVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKTtcbiAgICBjb25zdCBXQUlUSU5HX0JPVEhfUExBWUVSU19URVhUID0gYDxiPklOU1RSVUNUSU9OUzwvYj46XFxuJHtnYW1lSW5zdHJ1Y3Rpb25zfVxcblxcblxcblxcblByZXNzIGFueSBrZXkgd2hlbiB5b3UgYXJlIHJlYWR5IHRvIHBsYXlgO1xuICAgIGNvbnN0IFdBSVRJTkdfT05FX1BMQVlFUl9URVhUID0gYDxiPklOU1RSVUNUSU9OUzwvYj46XFxuJHtnYW1lSW5zdHJ1Y3Rpb25zfVxcblxcblxcblxcbldhaXRpbmcgb3RoZXIgcGxheWVyLi4uYDtcbiAgICBjb25zdCBXQUlUSU5HX0ZST01fTk9OX1BMQVlFUiA9IGA8Yj5JTlNUUlVDVElPTlM8L2I+OlxcbiR7Z2FtZUluc3RydWN0aW9uc31cXG5cXG5cXG5cXG5XYWl0aW5nIHBsYXllcnMgLi4uYDtcblxuICAgIE1lc2hSZW5kZXJlci5zZXRQbGFuZShzY3JlZW5FbnRpdHkpO1xuXG4gICAgVHJhbnNmb3JtLmNyZWF0ZShzY3JlZW5FbnRpdHksIHtwYXJlbnQsIHBvc2l0aW9uLCByb3RhdGlvbiwgc2NhbGV9KTtcblxuICAgIFZpZGVvUGxheWVyLmNyZWF0ZShzY3JlZW5FbnRpdHksIHtcbiAgICAgICAgc3JjOiBgJHtiYXNlSW5zdHJ1Y3Rpb25WaWRlb1VSTH0vJHtnYW1lQWxpYXN9Lm1wNGAsXG4gICAgICAgIHBsYXlpbmc6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgdmlkZW9UZXh0dXJlID0gTWF0ZXJpYWwuVGV4dHVyZS5WaWRlbyh7dmlkZW9QbGF5ZXJFbnRpdHk6IHNjcmVlbkVudGl0eX0pXG4gICAgTWF0ZXJpYWwuc2V0UGJyTWF0ZXJpYWwoc2NyZWVuRW50aXR5LCB7XG4gICAgICAgIHRleHR1cmU6IHZpZGVvVGV4dHVyZSxcbiAgICAgICAgcm91Z2huZXNzOiAxLjAsXG4gICAgICAgIHNwZWN1bGFySW50ZW5zaXR5OiAwLFxuICAgICAgICBtZXRhbGxpYzogMCxcbiAgICB9KTtcblxuICAgIGNvbnN0IGluc3RydWN0aW9uc1RleHRFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KCk7XG4gICAgVGV4dFNoYXBlLmNyZWF0ZShpbnN0cnVjdGlvbnNUZXh0RW50aXR5LCB7XG4gICAgICAgIHRleHQ6fnBsYXllckluZGV4P1dBSVRJTkdfQk9USF9QTEFZRVJTX1RFWFQ6V0FJVElOR19GUk9NX05PTl9QTEFZRVIsXG4gICAgICAgIGZvbnRTaXplOjAuNCxcbiAgICAgICAgdGV4dEFsaWduOlRleHRBbGlnbk1vZGUuVEFNX1RPUF9DRU5URVIsXG4gICAgICAgIHNoYWRvd0NvbG9yOkNvbG9yMy5CbGFjaygpLFxuICAgICAgICBzaGFkb3dPZmZzZXRZOjAuMSxcbiAgICAgICAgc2hhZG93T2Zmc2V0WDowLjEsXG4gICAgICAgIHNoYWRvd0JsdXI6MTBcbiAgICB9KTtcbiAgICBUcmFuc2Zvcm0uY3JlYXRlKGluc3RydWN0aW9uc1RleHRFbnRpdHksIHtwYXJlbnQ6c2NyZWVuRW50aXR5LCBwb3NpdGlvbjpWZWN0b3IzLmNyZWF0ZSgwLCAwLjQ1LC0wLjAwMSl9KTtcbiAgICBsZXQgY291bnRkb3duSW50ZXJ2YWw6bnVtYmVyID0gMDtcbiAgICBjb25zdCBzZXRUaW1lb3V0ID0gKHRpbWVvdXQ6bnVtYmVyKT0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb3VudGRvd25cIixzZXRUaW1lb3V0KVxuICAgICAgICBzdGF0ZS50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgaWYoY291bnRkb3duSW50ZXJ2YWwpIHRpbWVycy5jbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKTtcbiAgICAgICAgc3RhdGUudGltZW91dFN0YXJ0ZWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY291bnRkb3duSW50ZXJ2YWwgPSB0aW1lcnMuc2V0SW50ZXJ2YWwoKCk9PntcbiAgICAgICAgICAgIGlmKH5wbGF5ZXJJbmRleCl7XG4gICAgICAgICAgICAgICAgaWYoc3RhdGUud2FpdGluZ090aGVyKXtcbiAgICAgICAgICAgICAgICAgICAgVGV4dFNoYXBlLmdldE11dGFibGUoaW5zdHJ1Y3Rpb25zVGV4dEVudGl0eSkudGV4dCA9IFdBSVRJTkdfT05FX1BMQVlFUl9URVhUICsgYFxcblxcbiR7Zm9ybWF0VGltZW91dChzdGF0ZS50aW1lb3V0IC0gKERhdGUubm93KCkgLSBzdGF0ZS50aW1lb3V0U3RhcnRlZFRpbWUpKX1gO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBUZXh0U2hhcGUuZ2V0TXV0YWJsZShpbnN0cnVjdGlvbnNUZXh0RW50aXR5KS50ZXh0ID0gV0FJVElOR19CT1RIX1BMQVlFUlNfVEVYVCsgYFxcblxcbiR7Zm9ybWF0VGltZW91dChzdGF0ZS50aW1lb3V0IC0gKERhdGUubm93KCkgLSBzdGF0ZS50aW1lb3V0U3RhcnRlZFRpbWUpKX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIFRleHRTaGFwZS5nZXRNdXRhYmxlKGluc3RydWN0aW9uc1RleHRFbnRpdHkpLnRleHQgPSBXQUlUSU5HX0ZST01fTk9OX1BMQVlFUisgYFxcblxcbiR7Zm9ybWF0VGltZW91dChzdGF0ZS50aW1lb3V0IC0gKERhdGUubm93KCkgLSBzdGF0ZS50aW1lb3V0U3RhcnRlZFRpbWUpKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAzMDApO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogKCkgPT4ge1xuICAgICAgICAgICAgZW5naW5lLnJlbW92ZUVudGl0eShpbnN0cnVjdGlvbnNUZXh0RW50aXR5KTtcbiAgICAgICAgICAgIGVuZ2luZS5yZW1vdmVFbnRpdHkoc2NyZWVuRW50aXR5KTtcbiAgICAgICAgICAgIHRpbWVycy5jbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKTtcbiAgICAgICAgICAgIGNvdW50ZG93bkludGVydmFsID0gMDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmlkZW8gc2NyZWVuIGRlc3Ryb3lcIilcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U3RhdGU6KCk9PnN0YXRlLFxuICAgICAgICBzaG93V2FpdGluZ0Zvck90aGVyUGxheWVyOih7dGltZW91dCA9IDIwMDAwfSk9PntcbiAgICAgICAgICAgIHN0YXRlLndhaXRpbmdPdGhlciA9IHRydWU7XG4gICAgICAgICAgICBUZXh0U2hhcGUuZ2V0TXV0YWJsZShpbnN0cnVjdGlvbnNUZXh0RW50aXR5KS50ZXh0ID0gV0FJVElOR19PTkVfUExBWUVSX1RFWFQ7XG4gICAgICAgICAgICBpZih0aW1lb3V0KXtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRUaW1lb3V0XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lb3V0KG1zOm51bWJlcil7XG4gICAgcmV0dXJuIGA8Yj4ke01hdGgubWF4KDAsTWF0aC5mbG9vcihtcy8xMDAwKSl9PC9iPmA7XG59Il19
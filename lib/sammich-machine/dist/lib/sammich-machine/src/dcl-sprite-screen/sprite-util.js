export var UVS_BACK;
(function (UVS_BACK) {
    UVS_BACK[UVS_BACK["INVISIBLE"] = 0] = "INVISIBLE";
    UVS_BACK[UVS_BACK["SAME"] = 1] = "SAME";
    UVS_BACK[UVS_BACK["MIRROR"] = 2] = "MIRROR";
})(UVS_BACK || (UVS_BACK = {}));
export function getUvsFromSprite({ spriteDefinition, back = UVS_BACK.INVISIBLE }) {
    const { spriteSheetWidth, spriteSheetHeight, x, y, w, h } = spriteDefinition;
    const X1 = x / spriteSheetWidth;
    const X2 = (x / spriteSheetWidth + w / spriteSheetWidth);
    const Y1 = 1 - (y / spriteSheetHeight);
    const Y2 = 1 - (y / spriteSheetHeight + h / spriteSheetHeight);
    const FRONT_UVS = [
        X1, Y2,
        X1, Y1,
        X2, Y1,
        X2, Y2
    ];
    const BACK_UVS = back === 0
        ? [0, 0, 0, 0, 0, 0, 0, 0]
        : back === 1
            ? FRONT_UVS
            : [
                X2, Y2,
                X2, Y1,
                X1, Y1,
                X1, Y2
            ];
    return [
        ...FRONT_UVS,
        ...BACK_UVS
    ];
}
export function createSpriteAnimationUVSGetter({ spriteDefinition, back = UVS_BACK.INVISIBLE }) {
    const { x, y, w, h, columns } = spriteDefinition;
    return (frame) => {
        const _x = x + ((frame * w) % ((columns || 1) * w));
        const _y = y + Math.floor(frame / (columns || 1)) * h;
        return getUvsFromSprite({
            spriteDefinition: {
                ...spriteDefinition,
                x: _x, y: _y
            },
            back
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ByaXRlLXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGNsLXNwcml0ZS1zY3JlZW4vc3ByaXRlLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFOLElBQVksUUFFWDtBQUZELFdBQVksUUFBUTtJQUNoQixpREFBUyxDQUFBO0lBQUUsdUNBQUksQ0FBQTtJQUFFLDJDQUFNLENBQUE7QUFDM0IsQ0FBQyxFQUZXLFFBQVEsS0FBUixRQUFRLFFBRW5CO0FBdUNELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxFQUF3QjtJQUNqRyxNQUFNLEVBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0UsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixHQUFHLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztJQUMvRCxNQUFNLFNBQVMsR0FBRztRQUNkLEVBQUUsRUFBRSxFQUFFO1FBQ04sRUFBRSxFQUFFLEVBQUU7UUFDTixFQUFFLEVBQUUsRUFBRTtRQUNOLEVBQUUsRUFBRSxFQUFFO0tBQ1QsQ0FBQTtJQUNELE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO1lBQ1IsQ0FBQyxDQUFDLFNBQVM7WUFDWCxDQUFDLENBQUM7Z0JBQ0UsRUFBRSxFQUFFLEVBQUU7Z0JBQ04sRUFBRSxFQUFFLEVBQUU7Z0JBQ04sRUFBRSxFQUFFLEVBQUU7Z0JBQ04sRUFBRSxFQUFFLEVBQUU7YUFDVCxDQUFBO0lBRVQsT0FBTztRQUNILEdBQUcsU0FBUztRQUNaLEdBQUcsUUFBUTtLQUNkLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUFDLEVBQUMsZ0JBQWdCLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQXdCO0lBQy9HLE1BQU0sRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFDLEdBQUcsZ0JBQWdCLENBQUM7SUFFL0MsT0FBTyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEQsT0FBTyxnQkFBZ0IsQ0FBQztZQUNwQixnQkFBZ0IsRUFBRTtnQkFDZCxHQUFHLGdCQUFnQjtnQkFDbkIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTthQUNmO1lBQ0QsSUFBSTtTQUNQLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBVVlNfQkFDSyB7XG4gICAgSU5WSVNJQkxFLCBTQU1FLCBNSVJST1Jcbn1cbmV4cG9ydCB0eXBlIFNwcml0ZURlZmluaXRpb24gPSB7XG4gICAgc3ByaXRlU2hlZXRXaWR0aDogbnVtYmVyO1xuICAgIHNwcml0ZVNoZWV0SGVpZ2h0OiBudW1iZXI7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG4gICAgaDogbnVtYmVyO1xuICAgIGNvbHVtbnM/OiBudW1iZXI7XG4gICAgZnJhbWVzPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgU3ByaXRlID0ge1xuICAgIElEOm51bWJlcixcbiAgICBnZXRQaXhlbFBvc2l0aW9uOigpPT5udW1iZXJbXSxcbiAgICBhcHBseUZyYW1lOkZ1bmN0aW9uLFxuICAgIGhpZGU6RnVuY3Rpb24sXG4gICAgc2hvdzpGdW5jdGlvbixcbiAgICBzZXRQaXhlbFBvc2l0aW9uOkZ1bmN0aW9uLFxuICAgIHNldFpvb206RnVuY3Rpb24sXG4gICAgZGVzdHJveTpGdW5jdGlvbixcbiAgICBzZXROZXR3b3JrOkZ1bmN0aW9uLFxuICAgIGdldE5ldHdvcms6RnVuY3Rpb25cbiAgICBnZXRGcmFtZTogRnVuY3Rpb247XG4gICAgZ2V0TGF5ZXI6IEZ1bmN0aW9uO1xufVxuXG5leHBvcnQgdHlwZSBTcHJpdGVEZWZpbml0aW9uUGFyYW1zID0ge1xuICAgIHNwcml0ZURlZmluaXRpb246IFNwcml0ZURlZmluaXRpb247XG4gICAgYmFjaz86IFVWU19CQUNLO1xufTtcblxuLyoqXG4gKiAgICAgIEIgLS0tLS0tPiBDXG4gKiAgICAgIF4gICAgICAgICB8XG4gKiAgICAgIHwgICAgICAgICB8XG4gKiAgICAgIHwgICAgICAgICB2XG4gKiAgICAgIEEgPC0tLS0tLSBEXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVdnNGcm9tU3ByaXRlKHtzcHJpdGVEZWZpbml0aW9uLCBiYWNrID0gVVZTX0JBQ0suSU5WSVNJQkxFfTpTcHJpdGVEZWZpbml0aW9uUGFyYW1zKSB7XG4gICAgY29uc3Qge3Nwcml0ZVNoZWV0V2lkdGgsIHNwcml0ZVNoZWV0SGVpZ2h0LCB4LCB5LCB3LCBofSA9IHNwcml0ZURlZmluaXRpb247XG4gICAgY29uc3QgWDEgPSB4IC8gc3ByaXRlU2hlZXRXaWR0aDtcbiAgICBjb25zdCBYMiA9ICh4IC8gc3ByaXRlU2hlZXRXaWR0aCArIHcgLyBzcHJpdGVTaGVldFdpZHRoKTtcbiAgICBjb25zdCBZMSA9IDEgLSAoeSAvIHNwcml0ZVNoZWV0SGVpZ2h0KTtcbiAgICBjb25zdCBZMiA9IDEgLSAoeSAvIHNwcml0ZVNoZWV0SGVpZ2h0ICsgaCAvIHNwcml0ZVNoZWV0SGVpZ2h0KTtcbiAgICBjb25zdCBGUk9OVF9VVlMgPSBbXG4gICAgICAgIFgxLCBZMiwgLy9BXG4gICAgICAgIFgxLCBZMSwgLy9CXG4gICAgICAgIFgyLCBZMSwgLy9DXG4gICAgICAgIFgyLCBZMiAvL0RcbiAgICBdXG4gICAgY29uc3QgQkFDS19VVlMgPSBiYWNrID09PSAwXG4gICAgICAgID8gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdXG4gICAgICAgIDogYmFjayA9PT0gMVxuICAgICAgICAgICAgPyBGUk9OVF9VVlNcbiAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgIFgyLCBZMixcbiAgICAgICAgICAgICAgICBYMiwgWTEsXG4gICAgICAgICAgICAgICAgWDEsIFkxLFxuICAgICAgICAgICAgICAgIFgxLCBZMlxuICAgICAgICAgICAgXVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLi4uRlJPTlRfVVZTLFxuICAgICAgICAuLi5CQUNLX1VWU1xuICAgIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcHJpdGVBbmltYXRpb25VVlNHZXR0ZXIoe3Nwcml0ZURlZmluaXRpb24sIGJhY2sgPSBVVlNfQkFDSy5JTlZJU0lCTEV9OlNwcml0ZURlZmluaXRpb25QYXJhbXMpIHtcbiAgICBjb25zdCB7eCwgeSwgdywgaCwgY29sdW1uc30gPSBzcHJpdGVEZWZpbml0aW9uO1xuXG4gICAgcmV0dXJuIChmcmFtZTpudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgX3ggPSB4ICsgKChmcmFtZSAqIHcpICUgKChjb2x1bW5zfHwxKSAqIHcpKTtcbiAgICAgICAgY29uc3QgX3kgPSB5ICsgTWF0aC5mbG9vcihmcmFtZSAvIChjb2x1bW5zfHwxKSkgKiBoO1xuXG4gICAgICAgIHJldHVybiBnZXRVdnNGcm9tU3ByaXRlKHtcbiAgICAgICAgICAgIHNwcml0ZURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAuLi5zcHJpdGVEZWZpbml0aW9uLFxuICAgICAgICAgICAgICAgIHg6IF94LCB5OiBfeVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhY2tcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==
export const cloneDeep = (o) => JSON.parse(JSON.stringify(o));
export function getRandomFromList(list, exclude) {
    if (!list?.length)
        return undefined;
    let iterations;
    let index = getRandomInt(0, list.length - 1);
    if (list.every((item) => {
        if (exclude && exclude instanceof Array) {
            return ~exclude.indexOf(item);
        }
        else if (typeof exclude === 'function') {
            return exclude(item);
        }
        else if (exclude !== undefined) {
            return exclude === item;
        }
    })) {
        throw Error("All items on list are excluded");
    }
    if (exclude && exclude instanceof Array) {
        while (~exclude.indexOf(list[index])) {
            index = getRandomInt(0, list.length - 1);
        }
    }
    else if (typeof exclude === 'function') {
        while (exclude(list[index])) {
            index = getRandomInt(0, list.length - 1);
        }
    }
    else if (exclude !== undefined) {
        while (list[index] === exclude) {
            index = getRandomInt(0, list.length - 1);
        }
    }
    return list[index];
}
export function getRandomInt(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
}
export function waitFor(check, intervalMs = 100) {
    return new Promise((resolve, reject) => {
        try {
            let resolved = false;
            while (!resolved) {
                resolved = check();
            }
            resolve(resolved);
        }
        catch (error) {
            reject(error);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWItdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWxFLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFVLEVBQUUsT0FBNEI7SUFDdEUsSUFBRyxDQUFDLElBQUksRUFBRSxNQUFNO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDbkMsSUFBSSxVQUFVLENBQUM7SUFFZixJQUFJLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBUSxFQUFDLEVBQUU7UUFDdEIsSUFBRyxPQUFPLElBQUksT0FBTyxZQUFZLEtBQUssRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2pDLENBQUM7YUFBTSxJQUFHLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBQyxDQUFDO1lBQ3JDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLENBQUM7YUFBSyxJQUFHLE9BQU8sS0FBSyxTQUFTLEVBQUMsQ0FBQztZQUM1QixPQUFPLE9BQU8sS0FBSyxJQUFJLENBQUM7UUFDNUIsQ0FBQztJQUNMLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDQSxNQUFNLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxJQUFHLE9BQU8sSUFBSSxPQUFPLFlBQVksS0FBSyxFQUFFLENBQUM7UUFDckMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNuQyxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7SUFDTCxDQUFDO1NBQUssSUFBRyxPQUFPLE9BQU8sS0FBSyxVQUFVLEVBQUMsQ0FBQztRQUNwQyxPQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDO1lBQ3hCLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDNUMsQ0FBQztJQUVMLENBQUM7U0FBSyxJQUFHLE9BQU8sS0FBSyxTQUFTLEVBQUMsQ0FBQztRQUM1QixPQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxPQUFPLEVBQUMsQ0FBQztZQUMzQixLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVSxFQUFFLEdBQVU7SUFDL0MsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBYyxFQUFFLGFBQW9CLEdBQUc7SUFDM0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsRUFBRTtRQUNsQyxJQUFHLENBQUM7WUFDQSxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDckIsT0FBTSxDQUFDLFFBQVEsRUFBQyxDQUFDO2dCQUNiLFFBQVEsR0FBRyxLQUFLLEVBQUUsQ0FBQztZQUN2QixDQUFDO1lBQ0QsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFBQSxPQUFNLEtBQUssRUFBQyxDQUFDO1lBQ1YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2pCLENBQUM7SUFHTCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCBjbG9uZURlZXAgPSAobzphbnkpID0+IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobykpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tRnJvbUxpc3QobGlzdDphbnlbXSwgZXhjbHVkZT86KCgpPT5hbnkpfGFueVtdfGFueSl7XG4gICAgaWYoIWxpc3Q/Lmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBsZXQgaXRlcmF0aW9uczsvL1RPRE8gdG8gaW1wbGVtZW50IGluZmluaXRlIGxvb3AgcHJvdGVjdGlvblxuICAgIC8vVE9ETyBjaGVjayBpZiBhbGwgaXRlbXMgYXJlIGV4Y2x1ZGVkXG4gICAgbGV0IGluZGV4ID0gZ2V0UmFuZG9tSW50KDAsbGlzdC5sZW5ndGgtMSk7XG4gICAgaWYobGlzdC5ldmVyeSgoaXRlbTphbnkpPT57XG4gICAgICAgIGlmKGV4Y2x1ZGUgJiYgZXhjbHVkZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gfmV4Y2x1ZGUuaW5kZXhPZihpdGVtKVxuICAgICAgICB9IGVsc2UgaWYodHlwZW9mIGV4Y2x1ZGUgPT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGV4Y2x1ZGUoaXRlbSk7XG4gICAgICAgIH1lbHNlIGlmKGV4Y2x1ZGUgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICByZXR1cm4gZXhjbHVkZSA9PT0gaXRlbTtcbiAgICAgICAgfVxuICAgIH0pKXtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJBbGwgaXRlbXMgb24gbGlzdCBhcmUgZXhjbHVkZWRcIik7XG4gICAgfVxuICAgIGlmKGV4Y2x1ZGUgJiYgZXhjbHVkZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHdoaWxlICh+ZXhjbHVkZS5pbmRleE9mKGxpc3RbaW5kZXhdKSkge1xuICAgICAgICAgICAgaW5kZXggPSBnZXRSYW5kb21JbnQoMCwgbGlzdC5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgIH1lbHNlIGlmKHR5cGVvZiBleGNsdWRlID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2hpbGUoZXhjbHVkZShsaXN0W2luZGV4XSkpe1xuICAgICAgICAgICAgaW5kZXggPSBnZXRSYW5kb21JbnQoMCwgbGlzdC5sZW5ndGggLSAxKVxuICAgICAgICB9XG5cbiAgICB9ZWxzZSBpZihleGNsdWRlICE9PSB1bmRlZmluZWQpe1xuICAgICAgICB3aGlsZShsaXN0W2luZGV4XSA9PT0gZXhjbHVkZSl7XG4gICAgICAgICAgICBpbmRleCA9IGdldFJhbmRvbUludCgwLGxpc3QubGVuZ3RoLTEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RbaW5kZXhdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbjpudW1iZXIsIG1heDpudW1iZXIpIHtcbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3IoY2hlY2s6RnVuY3Rpb24sIGludGVydmFsTXM6bnVtYmVyID0gMTAwKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSghcmVzb2x2ZWQpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gY2hlY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUocmVzb2x2ZWQpO1xuICAgICAgICB9Y2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICB9XG5cblxuICAgIH0pXG59Il19